# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
  #  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
PS1="['\[\033[01;36m\]\t'\[\033[01;31m\] Deployer Mode:'\[\033[01;34m\]'\w: \[\033[0m\]' ] $ "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias rc='nano ~/.bashrc'
alias sc='source ~/.bashrc'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias cls='clear'
alias pp='docker ps'
alias psd='docker rm -f $(docker ps -aq)'
alias imd='docker rmi -f $(docker images -aq)'
alias ls='ls -lrt'
alias token='echo token'
alias rglookup='az group list | grep $1'
alias registry='echo registry#'
alias dns='echo dns'
#alias cd='cd $1 && ls'
alias pp='docker ps'
alias im='docker images'
alias loginreg='docker login -u dhegupta --password $(oc whoami -t) registry#/'
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#    . /etc/bash_completion
#fi
function sr () { docker build -t "$1" . && docker tag "$1" registry.ioo/"$2" && docker push registry.io/"$2"; }

function exe() { docker exec -it "$1" /bin/bash ;}
function builder() { docker build -t "$1" . ;}


# create vm 
function createvm() {
figlet VM CREATE MODULE
echo -e " Welcome to VM create Command line utility tool\n "
read -p "Enter VM Name: " vmname
read -p "Enter Resource Group Name :" rgname
read -p "Enter location of the VM(westeurope,westus,centralindia): " location
echo -e "Select OS \n 1. Windows \n 2. Linux" 
read -p "OS(1 or 2):" choice

if [ "$choice" == '1' ]
then 
   os=Win2019Datacenter
elif [ "$choice" == '2' ]
then 
   os=UbuntuLTS
else 
  echo -e "please check the choices given above and try again :)\n"
fi
read -p "Enter Login username:  " username
read -p "Enter Login Password:  " password
read -p "Enter size: (b2ms,b4ms) " size
read -p "Enter SPOC:  " spoc
read -p "Enter userEmail for notification:  " email
read  -p "autoshutdown time ex. 1330 for 6:30 in evening: " time
echo -e " Details of the virtual machine are: ---\n VMNAME= $vmname \n RESOURCE GROUP NAME= $rgname \n Location= $location \n USERNAME= $username \n PASSWORD= $password \n SIZE= Standard_$size \n EMAIL ADDRESS= $email \n"
read -p "All Good(yes or no)??" good
if [ "$good" == 'yes' ]
then
figlet IN PROGRESS...... && az vm create -n $vmname -g $rgname --image $os --size Standard_$size --public-ip-address-dns-name $vmname --location $location --admin-username username --admin-password $password --tags SP$
elif [ "$good" == 'no' ]
then
  echo -e "cool try next time :)\n"
exit
else 
figlet Try Again. Adios!!!!
fi
}

export NVM_DIR="/root/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
